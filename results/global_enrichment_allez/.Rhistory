allez_table[, c("ensembl_ids", "symbols")] <- NA
names(allez_table)[names(allez_table) == "genes"] <- "entrenz_ids"
# Iterate over each row (category) and update them (add gene ids and gene symbols)
for (i in 1:nrow(allez_table)) {
row <- allez_table[i,]
row$entrenz_ids <- gsub(";", ",", row$entrenz_ids)
entrenz_ids <- strsplit(row$entrenz_ids, ",")[[1]]
print(entrenz_ids)
#result <- select(org.Mm.eg.db, entrenz_ids, c("SYMBOL", "GENENAME"), "ALIAS")
result <- select(org.Mm.eg.db,
keys= as.character(as.matrix(entrenz_ids)),
columns=c("SYMBOL", "ENSEMBL"),
keytype="ENTREZID")
result <- result[!is.na(result$ENTREZID),]
row$ensembl_ids <-  paste0(result$ENSEMBL, collapse = ",")
row$symbols <- paste0(result$SYMBOL, collapse = ",")
allez_table[i,] <- row
}
allez_table <- allez_table[order(allez_table[,'z.score'], decreasing = TRUE),] # Sort by z-score
return(allez_table)
}
#######################
#######################
df <- anovas %>% dplyr::select(protein_id, gene_id, symbol,  r.mRNA_Age.Sex, r.Prot_Age.Sex, p.mRNA_Age.Sex, p.Prot_Age.Sex)
df <- df %>% dplyr::mutate(sig = (df$p.mRNA_Age.Sex < 0.05 & df$p.Prot_Age.Sex < 0.05))
pdf("mrna_age_v_protein_age_corrs_given_sex.pdf")
plot <- ggplot(df, aes(x=r.mRNA_Age.Sex, y=r.Prot_Age.Sex, color = sig)) +
geom_point(alpha = 0.3) +
theme_minimal() +
theme(legend.position = "none") +
xlab("mRNA-Age") +
ylab("Protein-Age") +
ggtitle("Protein-Age vs mRNA-Age Correlations given Sex") +
xlim(-0.7, 0.7) +
ylim(-1.1, 1.1)
print(plot)
dev.off()
#######################
sig_only <- df %>% filter(sig == TRUE)
mrna_low_protein_low <- sig_only %>% filter(r.Prot_Age.Sex < 0, r.mRNA_Age.Sex < 0)
mrna_low_protein_high <- sig_only %>% filter(r.Prot_Age.Sex > 0, r.mRNA_Age.Sex < 0)
mrna_high_protein_low <- sig_only %>% filter(r.Prot_Age.Sex < 0, r.mRNA_Age.Sex > 0)
mrna_high_protein_high <- sig_only %>% filter(r.Prot_Age.Sex > 0, r.mRNA_Age.Sex > 0)
write.csv(file = paste0(output_dir, "age_corrs_mrna_low_protein_low_genes.csv"), mrna_low_protein_low)
write.csv(file = paste0(output_dir, "age_corrs_mrna_low_protein_high_genes.csv"), mrna_low_protein_high)
write.csv(file = paste0(output_dir, "age_corrs_mrna_high_protein_low_genes.csv"), mrna_high_protein_low)
write.csv(file = paste0(output_dir, "age_corrs_mrna_high_protein_high_genes.csv"), mrna_high_protein_high)
# Do enrichment on each of these groups.
for (group_name in c("mrna_low_protein_low", "mrna_low_protein_high", "mrna_high_protein_low", "mrna_high_protein_high")) {
group <- eval(parse(text = group_name))
###################################################
# Cluster Profiler setup
###################################################
# Create df that maps ENSEMBL, ENTREZ, and symbols to each other.
# Contains all genes, not just significant genes.
universe_df <- bitr(as.character(anovas$symbol),
fromType = "SYMBOL",
toType = c("ENTREZID", "ENSEMBL"),
OrgDb = org.Mm.eg.db)
# Create df that contains only significant genes.
sig_gene_df <- bitr(as.character(group$symbol),
fromType = "SYMBOL",
toType = c("ENTREZID", "ENSEMBL"),
OrgDb = org.Mm.eg.db)
# ###########################################
# clusterProfiler Part 1 - GO
# ###########################################
# # GO over-representation test
go_enrich_output <- enrichGO( gene = sig_gene_df$ENTREZID,
universe = universe_df$ENTREZID,
OrgDb = org.Mm.eg.db,
ont = "BP",
pAdjustMethod = "BH",
pvalueCutoff = 0.05,
qvalueCutoff = 0.05,
readable = TRUE)
go_result <- go_enrich_output@result
if (nrow(go_enrich_output) != 0)
{
write.csv(go_enrich_output, file = paste0(output_dir, group_name, "_age_gsea_go_clusterProfiler.csv"), row.names = FALSE)
}
# ##########################################
# clusterProfiler Part 2- KEGG
# ##########################################
# KEGG over-representation test
kegg_enrich_output <- enrichKEGG(gene = sig_gene_df$ENTREZID,
organism = "mmu",
pvalueCutoff = 0.05)
if (nrow(kegg_enrich_output) != 0) {
# Save enrich KEGG, but first convert all ENTREZID into symbol for readability.
kegg_result <- kegg_enrich_output@result
kegg_result$geneID_symbol <- NA
for(k in 1:nrow(kegg_result)) {
list <- kegg_result$geneID[k]
list <- strsplit(list, "/")[[1]]
list <- as.data.frame(list)
list$ENSEMBL <- NA
for(n in 1:nrow(list)){
list$ENSEMBL[n] <- universe_df[universe_df$ENTREZID %in% list[n,"list"],]$SYMBOL[1]
}
kegg_result$geneID_symbol[k] <- paste(list$ENSEMBL, collapse = "/")
}
write.csv(kegg_result, file = paste0(output_dir, group_name, "_age_gsea_kegg_clusterProfiler.csv"), row.names = FALSE)
}
# ##########################################
# End of Allez enrichment analysis
# ##########################################
} # (group in c(mrna_low_protein_low, mrna_low_protein_high, mrna_high_protein_low, mrna_high_protein_high)) {
# correlations
# Author: Daniel Alfonsetti
# Date: July 26, 2018
# Description: Computes raw, sex adjusted, and age adjusted correlations between protein and mRNA expression levels.
# and plots the results
#######################
# Reset environment
rm(list=ls())
# Using local directories
input <- "~/do_heart/data/cleaned_data.RData"
load(input)
output_prefix <- "~/do_heart/results/mrna_protein_cors/"
# Using HPC directories
# input <- "/home/c-alfond/do_heart/data/cleaned_data.RData"
# load(input)
# output_prefix <- "/home/c-alfond/do_heart/results/"
#######################
library(ggplot2)
library(dplyr)
#######################
# Can only compute correlations for protein and mRNA that come in pairs.
# Intialize a dataframe to store our results.
corr.df <- data.frame(matrix(ncol=9, nrow = 0))
names(corr.df) <- c("gene.id", "protein.id", "symbol", "chr", "start", "end", "r.raw", "r.sex_adj", "r.age_adj")
# Iterate over genes row by row (only for mRNA and protein data that matches)
for (i in 1:N$complete) {
gene_row <- annot.protein[i,]
# Pull out relevant data
current_symbol = gene_row$symbol
current_chr = gene_row$chr
current_gene_id <- gene_row$gene_id
current_protein_id <- gene_row$protein_id # Get the correspoinding protein_id
current_start <- gene_row$start
current_end <- gene_row$end
mrna_expr_data <- expr.mrna[, current_gene_id]
protein_expr_data <- expr.protein[, current_protein_id]
# Create gene-specific data frame holding data to send to our linear models.
df <- cbind(annot.sample$Batch, annot.sample$Generation, annot.sample$Age, annot.sample$Sex, annot.sample$TMT, mrna_expr_data, protein_expr_data)
df <- as.data.frame(df)
colnames(df) <- c("Batch", "Generation", "Age", "Sex", "TMT", "mrna.expr", "protein.expr")
# Get raw
r.raw <- cor(mrna_expr_data, protein_expr_data)
# Get sex adjusted correlation
fit.prot.sex <- lm(protein_expr_data ~ Sex + Batch + Generation + TMT, data = df)
res.prot.sex <- residuals(fit.prot.sex)
fit.mrna.sex <- lm(mrna_expr_data ~ Sex + Batch + Generation + TMT, data = df)
res.mrna.sex <- residuals(fit.mrna.sex)
r.sex_adj <- cor(res.mrna.sex, res.prot.sex)
# Get age adjusted correlation
fit.prot.age <- lm(protein_expr_data ~ Age + Batch + Generation + TMT, data = df)
res.prot.age <- residuals(fit.prot.age)
fit.mrna.age <- lm(mrna_expr_data ~ Age + Batch + Generation + TMT, data = df)
res.mrna.age <- residuals(fit.mrna.age)
r.age_adj <- cor(res.mrna.age, res.prot.age)
# Store results in the 'results' dataframe we are building up row by row
corr.df[nrow(corr.df)+1,] <- list(current_gene_id, current_protein_id, current_symbol, current_chr, current_start, current_end, r.raw, r.sex_adj, r.age_adj)
}
# Save the results dataframe
write.csv(corr.df, file=paste0(output_prefix, "mrna_protein_cors.csv"), row.names = FALSE)
setwd(output_prefix)
corr.df <- read.csv2("mrna_protein_cors.csv", header = TRUE, sep = ",")
corr.df$r.raw <- as.numeric(as.character(corr.df$r.raw))
corr.df$r.sex_adj <- as.numeric(as.character(corr.df$r.sex_adj))
corr.df$r.age_adj <- as.numeric(as.character(corr.df$r.age_adj))
# Diagnostics. Correlation histograms.
corrs_only <- corr.df[,c("r.raw", "r.sex_adj", "r.age_adj")]
colnames(corrs_only) <- c("Raw", "Sex Adjusted", "Age Adjusted")
corrs_by_group <- stack(corrs_only)
corrs_by_group$ind <- factor(corrs_by_group$ind, levels = c("Raw", "Sex Adjusted", "Age Adjusted"))
setwd(output_dir)
pdf(file = "mrna_protein_cors.pdf")
p <- ggplot(data = corrs_by_group, aes(values)) +
geom_histogram(breaks=seq(-0.5, 1, by=0.01),
aes(fill=..count..)) +
theme_linedraw() +
facet_grid(vars(ind)) +
ggtitle("Protein-Transcript Correlations") +
xlab("Correlation Coefficients") +
ylab("Count")
p
dev.off()
rm(list=ls())
# Using local directories
input <- "~/do_heart/data/cleaned_data.RData"
load(input)
output_prefix <- "~/do_heart/results/mrna_protein_cors/"
# correlations
# Author: Daniel Alfonsetti
# Date: July 26, 2018
# Description: Computes raw, sex adjusted, and age adjusted correlations between protein and mRNA expression levels.
# and plots the results
#######################
# Reset environment
rm(list=ls())
# Using local directories
input <- "~/do_heart/data/cleaned_data.RData"
load(input)
output_prefix <- "~/do_heart/results/mrna_protein_cors/"
dir.create(output_prefix)
# Using HPC directories
# input <- "/home/c-alfond/do_heart/data/cleaned_data.RData"
# load(input)
# output_prefix <- "/home/c-alfond/do_heart/results/"
#######################
library(ggplot2)
library(dplyr)
#######################
# Can only compute correlations for protein and mRNA that come in pairs.
# Intialize a dataframe to store our results.
corr.df <- data.frame(matrix(ncol=9, nrow = 0))
names(corr.df) <- c("gene.id", "protein.id", "symbol", "chr", "start", "end", "r.raw", "r.sex_adj", "r.age_adj")
# Iterate over genes row by row (only for mRNA and protein data that matches)
for (i in 1:N$complete) {
gene_row <- annot.protein[i,]
# Pull out relevant data
current_symbol = gene_row$symbol
current_chr = gene_row$chr
current_gene_id <- gene_row$gene_id
current_protein_id <- gene_row$protein_id # Get the correspoinding protein_id
current_start <- gene_row$start
current_end <- gene_row$end
mrna_expr_data <- expr.mrna[, current_gene_id]
protein_expr_data <- expr.protein[, current_protein_id]
# Create gene-specific data frame holding data to send to our linear models.
df <- cbind(annot.sample$Batch, annot.sample$Generation, annot.sample$Age, annot.sample$Sex, annot.sample$TMT, mrna_expr_data, protein_expr_data)
df <- as.data.frame(df)
colnames(df) <- c("Batch", "Generation", "Age", "Sex", "TMT", "mrna.expr", "protein.expr")
# Get raw
r.raw <- cor(mrna_expr_data, protein_expr_data)
# Get sex adjusted correlation
fit.prot.sex <- lm(protein_expr_data ~ Sex + Batch + Generation + TMT, data = df)
res.prot.sex <- residuals(fit.prot.sex)
fit.mrna.sex <- lm(mrna_expr_data ~ Sex + Batch + Generation + TMT, data = df)
res.mrna.sex <- residuals(fit.mrna.sex)
r.sex_adj <- cor(res.mrna.sex, res.prot.sex)
# Get age adjusted correlation
fit.prot.age <- lm(protein_expr_data ~ Age + Batch + Generation + TMT, data = df)
res.prot.age <- residuals(fit.prot.age)
fit.mrna.age <- lm(mrna_expr_data ~ Age + Batch + Generation + TMT, data = df)
res.mrna.age <- residuals(fit.mrna.age)
r.age_adj <- cor(res.mrna.age, res.prot.age)
# Store results in the 'results' dataframe we are building up row by row
corr.df[nrow(corr.df)+1,] <- list(current_gene_id, current_protein_id, current_symbol, current_chr, current_start, current_end, r.raw, r.sex_adj, r.age_adj)
}
# Save the results dataframe
write.csv(corr.df, file=paste0(output_prefix, "mrna_protein_cors.csv"), row.names = FALSE)
setwd(output_prefix)
corr.df <- read.csv2("mrna_protein_cors.csv", header = TRUE, sep = ",")
corr.df$r.raw <- as.numeric(as.character(corr.df$r.raw))
corr.df$r.sex_adj <- as.numeric(as.character(corr.df$r.sex_adj))
corr.df$r.age_adj <- as.numeric(as.character(corr.df$r.age_adj))
# Diagnostics. Correlation histograms.
corrs_only <- corr.df[,c("r.raw", "r.sex_adj", "r.age_adj")]
colnames(corrs_only) <- c("Raw", "Sex Adjusted", "Age Adjusted")
corrs_by_group <- stack(corrs_only)
corrs_by_group$ind <- factor(corrs_by_group$ind, levels = c("Raw", "Sex Adjusted", "Age Adjusted"))
setwd(output_dir)
pdf(file = "mrna_protein_cors.pdf")
p <- ggplot(data = corrs_by_group, aes(values)) +
geom_histogram(breaks=seq(-0.5, 1, by=0.01),
aes(fill=..count..)) +
theme_linedraw() +
facet_grid(vars(ind)) +
ggtitle("Protein-Transcript Correlations") +
xlab("Correlation Coefficients") +
ylab("Count")
p
dev.off()
# Date: July 6, 2018
# Author: Daniel Alfonsetti
# Description: Enrichment analysis for DO cross-sectional heart data
# Reference: https://rdrr.io/github/atbroman/allez/
#######################
# Reset environment
rm(list=ls())
# Using local directories
input <- "~/do_heart/data/cleaned_data.RData"
load(input)
output_dir <- "~/do_heart/results/global_enrichment_allez/"
dir.create(output_dir)
# Using HPC directories
# input <- "/home/c-alfond/do_heart/data/cleaned_data.RData"
# load(input)
# output_dir <- "/home/c-alfond/do_heart/scripts/pipeline/output/"
#######################
library(allez)  # Enrichment analysis library
library("org.Mm.eg.db")  # Mouse data base
library(broom)
# Symbol and ID mappings.
ent2ens <- as.list(org.Mm.egENSEMBL)
ent2s <- as.list(org.Mm.egSYMBOL)
#######################
#######################
#######################
helper_func <- function(allez_table) {
# Description: Takes a table from the output of the allez function and adds columns that contain gene symbols and ensembl ids
# corresponding to the set of entrenz gene ids in a given row (category)
####
# Debugging
# allez_table <- sex_result_tbl
# Convert entrenz gene ids into ensemble gene ids and gene symbols
allez_table[, c("ensembl_ids", "symbols")] <- NA
names(allez_table)[names(allez_table) == "genes"] <- "entrenz_ids"
# Iterate over each row (category) and update them (add gene ids and gene symbols)
for (i in 1:nrow(allez_table)) {
row <- allez_table[i,]
row$entrenz_ids <- gsub(";", ",", row$entrenz_ids)
entrenz_ids <- strsplit(row$entrenz_ids, ",")[[1]]
print(entrenz_ids)
#result <- select(org.Mm.eg.db, entrenz_ids, c("SYMBOL", "GENENAME"), "ALIAS")
result <- select(org.Mm.eg.db,
keys= as.character(as.matrix(entrenz_ids)),
columns=c("SYMBOL", "ENSEMBL"),
keytype="ENTREZID")
result <- result[!is.na(result$ENTREZID),]
row$ensembl_ids <-  paste0(result$ENSEMBL, collapse = ",")
row$symbols <- paste0(result$SYMBOL, collapse = ",")
allez_table[i,] <- row
}
allez_table <- allez_table[order(allez_table[,'z.score'], decreasing = TRUE),] # Sort by z-score
return(allez_table)
}
#######################
#######################
#######################
# pdf("gsea_plots.pdf", width = 8, height = 6)
# Repeat script for each expression type (mrna and protein)
for (expr.type in c("mrna", "protein")) {
# expr.type <- "protein"
# Pull out data for current expression type.
if (expr.type == "mrna") { expr.data <- expr.mrna; colnames(expr.data) <- annot.mrna$symbol; annot.data <- annot.mrna
} else { expr.data <- expr.protein; colnames(expr.data) <- annot.protein$symbol; annot.data <- annot.protein}
# Remove duplicate columns
expr.data <- expr.data[, !duplicated(colnames(expr.data))]
# Create vector of t statistics for differential expression with respect to sex
score_sex <- vector(length = ncol(expr.data))
names(score_sex) <- colnames(expr.data)
for (i in 1:ncol(expr.data)) {
result <- t.test(expr.data[,i] ~ annot.sample$Sex)
score_sex[i] <- result$statistic # Pull out t-statistic
}
# Create vector of t statistics for differential expression with respect to age
score_age <- vector(length = ncol(expr.data))
names(score_age) <- colnames(expr.data)
for (i in 1:ncol(expr.data)) {
result <- lm(expr.data[,i] ~ annot.sample$Age)
t_val <-tidy(result)[2,4] # Pull out t-statistic
score_age[i] <- t_val
}
###################################################
###################################################
# Perform enrichment analysis for sex.
sex_result_KEGG <- allez(scores = score_sex, lib = "org.Mm.eg", sets="KEGG", idtype = "SYMBOL")
sex_result_GO <- allez(scores = score_sex, lib = "org.Mm.eg", sets="GO", idtype = "SYMBOL")
sex_result <- allezC(sex_result_GO, sex_result_KEGG) # Concatenate results
#allezPlot(sex_result) # Plotting function doesn't work right...
sex_result_tbl <- allezTable(sex_result)
sex_result_tbl <- helper_func(sex_result_tbl)
write.csv(sex_result_tbl, file = paste0(output_dir, expr.type, "_sex_gsea_tbl_allez.csv"))
###################################################
# Perform enrichment analysis for age. Save results.
age_result_KEGG <- allez(scores = score_age, lib = "org.Mm.eg", sets="KEGG", idtype = "SYMBOL")
age_result_GO <- allez(scores = score_age, lib = "org.Mm.eg", sets="GO", idtype = "SYMBOL")
age_result <- allezC(age_result_GO, age_result_KEGG) # Concatenate results
#allezPlot(age_result)
age_result_tbl <- allezTable(age_result)
age_result_tbl <- helper_func(age_result_tbl)
write.csv(age_result_tbl, file = paste0(output_dir, expr.type, "_age_gsea_tbl_allez.csv"))
}
#dev.off()
library(clusterProfiler)
library(clusterProfiler)
library(allez)
##################################################################################
# R/3.4.4
# Originally created by Yuka Takemon; modified by Daniel Alfonsetti (July 13, 2018)
# Load each file and create a matrix of Jaccard distances:
# J(A,B) = |A n B| / |A u B|
#        = count will give % similarity
# where A is the set of genes in one category and B is the set of genes in another category.
##################################################################################
# Reset environment
rm(list = ls())
set.seed(123)
# load libraries
library(tidyverse)
library(reshape2)
library(gplots)
library(foreach)
###
# set up directories (Local)
output_dir <- "~/do_heart/results/global_enrichment_allez/"
# set up directory (HPC)
enrich_dir  <- "/Users/c-alfond/do_heart/results/global_enrichment_allez/"
setwd(enrich_dir)
#########################################
#########################################
# Helper function to create the Jaccards distance df
makeJaccard <- function(data){
print(data)
# create list of gene lists
parsed_genelist <- vector("list", length = nrow(data))
for(n in 1:nrow(data)){
parsed_genelist[[n]] <- strsplit(as.character(data$symbols[n]), ",")
}
# create empty df to fill
Jaccard_df <- as.data.frame(matrix(data = NA, nrow = nrow(data), ncol = nrow(data)))
rownames(Jaccard_df) <- colnames(Jaccard_df) <- data$X
# All vs All comparison
for(x in 1:nrow(data)){
print(x)
for(y in 1:nrow(data)){
AnB <- length(intersect(parsed_genelist[[x]][[1]], parsed_genelist[[y]][[1]]))
AuB <- length(union(parsed_genelist[[x]][[1]], parsed_genelist[[y]][[1]]))
Jaccard_df[x,y] <- AnB / AuB
}
}
return(Jaccard_df)
}
#########################################
#########################################
# get list of all files, calculate their Jaccard disance and make plots (in parallel)
file_list <- dir(pattern = "gsea_tbl_allez.csv")
types <- c("mrna_age", "mrna_sex", "protein_age", "protein_sex")
######
# Plot heatmaps (in parallel)
pdf("allez_categories_reduce_heatmaps.pdf")
# foreach(type = types) %dopar% {
for (type in types) {
# Debugging
file <- file_list[grep(type, file_list)]
# output base file name
basename <- gsub('.csv', '', file)
print(basename)
data <- read.csv(file)
# Skip file if nothing is in it.
if (nrow(data) == 0) {next}
# Calculate Jaccard distance.
Jaccard_df <- makeJaccard(data)
# plot heatmap
heatmap.2(as.matrix(Jaccard_df), trace = "none", density.info = "none",
key=FALSE, cexRow = 1, cexCol = 1, mar=c(6,6), xlab = NULL, ylab = NULL)
text(unit(0.60, "npc"), unit(0.77, "npc"), type)
# # Plot dendogram
# hc <- hclust(dist(as.matrix(Jaccard_df)))
# plot(hc)
}
dev.off()
####################
####################
# Beyond this point, manually determine number of groups visually by plots for each file.
###########################
# 'my_cluster_func': Helper function to create clusters of categories for several files at a time.
# file_list is a list of files containing enriched category data that should be clustered.
# protein_ageN, protein_sexN, etc are numbers indicating how many clusters should be made out of each data file.
my_cluster_func <- function(file_list,  mrna_ageN, mrna_sexN, protein_ageN, protein_sexN){
for(type in c("mrna_age", "mrna_sex", "protein_age", "protein_sex")){
# get file and its data
file <- file_list[grepl(type, file_list)]
data <- read_csv(file)
# Calculate Jaccard distance
Jdist <- makeJaccard(data)
hc <- hclust(dist(as.matrix(Jdist)))
# Cluster according to file type. Each file type should can
# get a different number of clusters according to the parameter
# values passed to this function
if(type == "mrna_age"){
if(is.na(mrna_ageN)){
next
}
clust <- cutree(hc, k = mrna_ageN)
} else if(type == "mrna_sex"){
if(is.na(mrna_sexN)){
next
}
clust <- cutree(hc, k = mrna_sexN)
} else if (type == "protein_age"){
if(is.na(protein_ageN)){
next
}
clust <- cutree(hc, k = protein_ageN)
} else if(type == "protein_sex"){
if(is.na(protein_sexN)){
next
}
clust <- cutree(hc, k = protein_sexN)
}
# Assign cluster group to each category.
data$ClusterN <- clust
# Order by group
data <- arrange(data, ClusterN)
# save data
basename <- gsub(".csv", "", file)
write.csv(data, file = paste0(basename, "_clustered.csv"), row.names = FALSE)
}
}
file_list <- c("mrna_age_gsea_tbl_allez.csv",  "mrna_sex_gsea_tbl_allez.csv",
"protein_age_gsea_tbl_allez.csv", "protein_sex_gsea_tbl_allez.csv")
# mrna_age has 28 groups
# mrna_sex has 18 groups
# protein_age has 4 groups
# protein_sex has 13 groups
file_list <- dir(pattern = "gsea_tbl_allez.csv")
my_cluster_func(file_list, mrna_ageN = 9, mrna_sexN = 4, protein_ageN = 4, protein_sexN = 4)
