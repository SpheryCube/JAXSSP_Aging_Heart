{
    "collab_server" : "",
    "contents" : "################################################################################\n# Generate eQTL and pQTL peak tables with allele effects for each test type.\n# R/3.4.4\n# Daniel Alfonsetti\n# daniel.alfonsetti@gmail.com\n# Jul. 22, 2018\n################################################################################\n# Reset environment\nrm(list = ls())\n\nlibrary(qtl2)\nlibrary(tidyverse)\nlibrary(doParallel)\nlibrary(foreach)\n\n######## \n# Using Local directories\n######## \nnum_cores <- 1\nlod_thresh <- 6\n\n# Input paths\ngenoprobs_file <- \"~/do_heart/data/cleaned_data_with_genoprobs.RData\"\nload(genoprobs_file)\n\nperms_input_dir <- \"~/do_heart/results/\"\nqtl_input_dir <- \"~/do_heart/results/\"\n\n# # Output paths\npeaks_output_dir <- \"~/do_heart/results/\"\n\n######## \n# Using HPC directories\n######## \nnum_cores <- 15\nlod_thresh <- 6\n\n# Input paths\ngenoprobs_file <- \"/home/c-alfond/do_heart/data/cleaned_data_with_genoprobs.RData\"\nload(genoprobs_file)\n\n# perms_input_dir <- \"/fastscratch/c-alfond/do_heart/scripts/pipeline/output/\" # In case we are using perms threshold.\nqtl_input_dir <- \"/fastscratch/c-alfond/do_heart/results/\"\n\n# Output paths\npeaks_output_dir <- \"/fastscratch/c-alfond/do_heart/results/\"\n##########################################################\n##########################################################\n\n# Setup some varables needed for the coef_fxn\nsex <- as.numeric(annot.sample$Sex) # 1 is female, 2 is male\nnames(sex) <- rownames(annot.sample)\n\nage <- as.numeric(annot.sample$Age)\nnames(age) <- rownames(annot.sample)\n\n# Register parallele back end.\nregisterDoParallel(cores = num_cores)\n#######################\n#######################\n\n# Helper function\n# For each peak, get the BLUP coefficients and add them to the output\ncoef_fxn = function(peaks, expr_type) {\n  \n  # Setup variables according to parameters\n  # Include sex, age, generation, batch, and tag for protein expression data. \n  # Include only sex, age, and generation for mrna.\n  if (expr_type == 'protein')\n  {\n    pheno_data <- expr.protein\n    a_covars <- cbind(sex, age, as.numeric(annot.sample$Generation), as.numeric(annot.sample$Batch), as.numeric(as.factor(annot.sample$TMT)))\n  } else {\n    pheno_data <- expr.mrna\n    a_covars <- cbind(sex, age, as.numeric(annot.sample$Generation))\n  }\n  \n  # Add columns for allele effect coefficients\n  peaks = cbind(peaks, matrix(0, nrow = nrow(peaks), ncol = 8, dimnames =\n                                list(NULL, LETTERS[1:8])))\n  cols2fill = (ncol(peaks) - 7):ncol(peaks)\n  \n  # Iterate over rows in parallel\n  peaks_w_effects <- foreach(i = 1:nrow(peaks), .combine = \"rbind\") %dopar% {\n    qtl_chr  = peaks$qtl_chr[i]\n    qtl_pos <- peaks$qtl_pos[i]\n    \n    # Get marker id\n    chr_gmap <- gmap[[qtl_chr]]\n    tmp <- which.min(abs(chr_gmap-qtl_pos))\n    qtl_mkr <- names(tmp)\n    rm(tmp)\n\n    # ensembl id for expression data being used. Could be protein or gene id.\n    pheno_id = peaks$lodcolumn[i] \n    \n    gp = genoprobs[,qtl_chr] # Get genoprobs for this chromosome at this marker.\n    gp[[1]] = gp[[1]][,,qtl_mkr, drop = FALSE] \n    \n    # Additive scans\n    blup = scan1blup(genoprobs = gp, pheno = pheno_data[,pheno_id, drop = FALSE],\n                     kinship = kin_mat_list[[qtl_chr]], addcovar = a_covars, \n                     cores = num_cores)\n\n    peaks[i,cols2fill] = blup[1,1:8]\n    \n    peaks[i,] # return row\n  } # foreach()\n  return(peaks_w_effects)\n} # coef_fxn()\n\n#######################\n#######################\n\n# Extract peak tables. Do in parallel\n# foreach(scan_type = c(\"protein_age\", \"protein_sex\", \"protein_none\", \"mrna_age\", \"mrna_sex\", \"mrna_none\")) %dopar% {\nfor (scan_type in c(\"protein_age\", \"protein_sex\", \"mrna_age\", \"mrna_sex\")) {\n    \n  print(\"=====================================\")\n  print(scan_type)\n\n  # Read in scan\n  print(\"Loading in scan...\")\n  qtl_file_name <- paste0(\"qtlscan_\", scan_type, \".rds\")\n  qtl_scan <- readRDS(paste0(qtl_input_dir, qtl_file_name))\n\n\n  print(\"Getting peaks!\")\n\n  # If we are using perms....\n    # Get current scans' corresponding set of permutations.\n    # perm_file_name <- paste0(\"perms_\", scan_type, \".rds\")\n    # perms <- readRDS(paste0(perms_input_dir, perm_file_name))\n    #\n    # # # Get 95 percentile of the permutation LOD distribution for each phenotype(expression data for an mRNA transcript or protein),\n    # # using the permutation object.\n    # thresholds95 <- summary(perms)\n    # peaks_table <- find_peaks(scan1_output = qtl_scan, map = gmap, threshold = thresholds95, prob = 0.95, cores = num_cores)\n\n\n  # If we are using a flat cutoff...\n  peaks_table <- find_peaks(scan1_output = qtl_scan, map = gmap, threshold = lod_thresh, prob = 0.95, cores = num_cores)\n\n  print(\"Got peaks!\")\n\n  # Rename columns\n  peaks_table <- dplyr::rename(peaks_table, qtl_chr = chr, qtl_pos = pos, qtl_lod = lod)\n\n  # Add columns\n  namevector <- c(\"gene_symbol\",\"gene_chr\",\"gene_start\", \"gene_middle\", \"gene_end\", \"cis\", \"qtl_mkr\")\n  peaks_table[, namevector] <- NA\n\n  levels <- c(1:19, \"X\", \"Y\", \"MT\")\n  peaks_table$gene_chr <- factor(peaks_table$gene_chr, levels)\n\n  # Add gene symbol and gene chromosome for each QTL (and gene id for pQTLs specifically)\n  if (grepl(\"mrna\", scan_type)) { # we are dealing with an mrna scan\n\n    # Reoder columns\n    peaks_table <- peaks_table[, c(\"lodcolumn\", \"gene_symbol\",\"gene_chr\", \"gene_start\", \"gene_middle\",\n                                   \"gene_end\", \"qtl_chr\", \"qtl_pos\", \"qtl_mkr\", \"qtl_lod\", \"cis\")]\n\n    # Update each row\n    peaks_table <- foreach(i = 1:nrow(peaks_table), .combine = \"rbind\") %dopar% {\n      row <- peaks_table[i,]\n\n      annot.row <- annot.mrna %>% filter(gene_id == row$lodcolumn)\n      annot.row <- annot.row[1,]  # Make sure we are only pulling out one row. (some transcripts map to multiple proteins)\n\n      row$gene_symbol <- annot.row$symbol\n      row$gene_chr <- annot.row$chr\n      row$gene_start <- annot.row$start / 10^6 # Convert bases to mega bases\n      row$gene_middle <- annot.row$middle / 10^6\n      row$gene_end <- annot.row$end / 10^6\n\n      peaks_table[i,] <- row\n      peaks_table[i,]\n    }\n\n  } else {  # Basically the same logic, except we are dealing with a protein scan.\n\n    # Add an extra column for gene_id (since protein ids are already in the \"lodcolumn\" column.)\n    peaks_table[,\"gene_id\"] <- NA\n    # Reorder columns\n    peaks_table <- peaks_table[, c(\"lodcolumn\", \"gene_id\", \"gene_symbol\",\"gene_chr\", \"gene_start\", \"gene_middle\",\n                                   \"gene_end\", \"qtl_chr\", \"qtl_pos\", \"qtl_mkr\", \"qtl_lod\", \"cis\")]\n\n    # Update each row\n    peaks_table <- foreach(i = 1:nrow(peaks_table), .combine = \"rbind\") %dopar% {\n      row <- peaks_table[i,]\n\n      annot.row <- annot.protein %>% filter(protein_id == row$lodcolumn)\n      annot.row <- annot.row[1,]\n\n      row$gene_symbol <- annot.row$symbol\n      row$gene_chr <- annot.row$chr\n      row$gene_start <- annot.row$start / 10^6\n      row$gene_middle <- annot.row$middle / 10^6\n      row$gene_end <- annot.row$end / 10^6\n\n      row$gene_id <- annot.row$gene_id\n\n      peaks_table[i,] <- row\n      peaks_table[i,]\n    }\n  }\n\n  # Sort by LOD score.\n  peaks_table <- peaks_table[order(peaks_table$qtl_lod, decreasing =TRUE),]\n\n  # Add allele effects\n  # Can only get allele effects for models that only use additive covariates.\n  if (scan_type == \"protein_none\" | scan_type == \"mrna_none\") {\n    expr_type <- ifelse(grepl(\"mrna\", scan_type), \"mrna\", \"protein\")\n    peaks_table <- coef_fxn(peaks_table, expr_type)\n    print(\"Got allele effects!\")\n  }\n\n  # Add QTL marker ids\n  peaks_table <- foreach(i = 1:nrow(peaks_table), .combine = \"rbind\") %dopar% {\n    qtl_chr  = peaks_table$qtl_chr[i]\n    qtl_pos <- peaks_table$qtl_pos[i]\n\n    chr_gmap <- gmap[[qtl_chr]]\n    tmp <- which.min(abs(chr_gmap-qtl_pos))\n    qtl_mkr <- names(tmp)\n    peaks_table[i, \"qtl_mkr\"] <- qtl_mkr\n    rm(tmp)\n    peaks_table[i,] # return row\n  }\n\n  # Set levels for qtl_chr and gene_chr. Force into factors.\n  levels <- c(1:19, \"X\", \"Y\", \"MT\")\n  peaks_table$qtl_chr <- factor(peaks_table$qtl_chr, levels = levels)\n  peaks_table$gene_chr <- factor(peaks_table$gene_chr, levels = levels)\n\n  # Display whether the qtl is local or distal.\n  # QTLs are considered local ('cis') if they are within 2 megabases of each other on the same chromosome.\n  peaks_table[, 'cis'] <- (peaks_table$gene_chr == peaks_table$qtl_chr) & (abs(peaks_table$gene_middle - peaks_table$qtl_pos) < 4)\n\n  # Save peaks table\n  print(\"Saving...\")\n  peaks_file_name <- paste0(\"peaks_\", scan_type)\n  write.csv(peaks_table, file = paste0(peaks_output_dir, peaks_file_name, \"_thresh_\", as.character(lod_thresh), \".csv\"), row.names = FALSE)\n  print(\"Done making allele tables\")\n}\n####################################################################################\n####################################################################################\n####################################################################################\n# Diagnostics/sanity checks for the mrna_none and protein_none tests\n# Test a few sets of coefficients from our outputs to make sure\n# they are congruent with effect plots.\n\n# setwd(peaks_output_dir)\n# print(\"Starting diagnostics...\")\n# print(\"Diagnostics for protein_none...\")\n# pdf(\"peaks_diagnostics.pdf\")\n# \n# # Test first for protein expression level allele effects.\n# scan_type <- \"protein_none\"\n# \n# qtl_file_name <- paste0(\"qtlscan_\", scan_type, \".rds\")\n# qtl_scan <- readRDS(paste0(qtl_input_dir, qtl_file_name))\n# a_covars <- cbind(sex, age, as.numeric(annot.sample$Generation), as.numeric(annot.sample$Batch), as.numeric(as.factor(annot.sample$TMT)))\n# rownames(a_covars) <- unlist(lapply(rownames(a_covars), gsub, pattern = \"-\", replacement = \".\"))\n# \n# # ENSMUSP00000139261 (KCTD12): QTL on chr 4 at 105 Mb. \n# protein_id <- \"ENSMUSP00000139261\"\n# chr <- 4\n# \n# coef <- scan1blup(genoprobs = genoprobs[,chr], \n#                   pheno = expr.protein[,protein_id], \n#                   kinship = kin_mat_list[[chr]],\n#                   addcovar = a_covars)\n# scan_output <- scan1(genoprobs = genoprobs, pheno = expr.protein[,protein_id], kinship = kin_mat_list, addcovar = a_covars, cores = num_cores)\n# plot_coefCC(x = coef, map = gmap[chr], scan1_output = scan_output, main = protein_id)\n# \n# # ENSMUSP00000138597: QTl on chr 7 at 134 Mb. Gga3\n# protein_id <- \"ENSMUSP00000138597\"\n# chr <- 7\n# \n# coef <- scan1blup(genoprobs = genoprobs[,chr], \n#                   pheno = expr.protein[,protein_id], \n#                   kinship = kin_mat_list[[chr]],\n#                   addcovar = a_covars)\n# scan_output <- scan1(genoprobs = genoprobs, pheno = expr.protein[,protein_id], kinship = kin_mat_list, addcovar = a_covars, cores = num_cores)\n# plot_coefCC(x = coef, map = gmap[chr], scan1_output = scan_output, main = protein_id)\n# \n# # ENSMUSP00000096753: Nnt qtl_chr 13 at qtl_pos 118\n# protein_id <- \"ENSMUSP00000096753\"\n# chr <- 13\n# \n# coef <- scan1blup(genoprobs = genoprobs[,chr], \n#                   pheno = expr.protein[,protein_id], \n#                   kinship = kin_mat_list[[chr]],\n#                   addcovar = a_covars)\n# scan_output <- scan1(genoprobs = genoprobs, pheno = expr.protein[,protein_id], kinship = kin_mat_list, addcovar = a_covars, cores = num_cores)\n# plot_coefCC(x = coef, map = gmap[chr], scan1_output = scan_output, main = protein_id)\n# \n# #############\n# # Now do diagnostics for mrna\n# ############\n# print(\"Diagnostics for mrna_none...\")\n# \n# scan_type <- \"mrna_none\"\n# \n# qtl_file_name <- paste0(\"qtlscan_\", scan_type, \".rds\")\n# qtl_scan <- readRDS(paste0(qtl_input_dir, qtl_file_name))\n# a_covars <- cbind(sex, age, as.numeric(annot.sample$Generation))\n# rownames(a_covars) <- unlist(lapply(rownames(a_covars), gsub, pattern = \"-\", replacement = \".\"))\n# \n# \n# #ENSMUSG00000099162 (RP23-279M5.2). QTL on chr X at 131 Mb\n# gene_id <- \"ENSMUSG00000099162\"\n# chr <- \"X\"\n# \n# coef <- scan1blup(genoprobs = genoprobs[,chr], \n#                   pheno = expr.mrna[,gene_id], \n#                   kinship = kin_mat_list[[chr]],\n#                   addcovar = a_covars)\n# scan_output <- scan1(genoprobs = genoprobs, pheno = expr.mrna[,gene_id], kinship = kin_mat_list, addcovar = a_covars, cores = num_cores)\n# plot_coefCC(x = coef, map = gmap[chr], scan1_output = scan_output, main = gene_id)\n# \n# # \n# # ENSMUSG00000041453\tRpl21, QTL on chr 5 at 146. QTL lod of 83\n# gene_id <- \"ENSMUSG00000041453\"\n# chr <- 5\n# \n# coef <- scan1blup(genoprobs = genoprobs[,chr], \n#                   pheno = expr.mrna[,gene_id], \n#                   kinship = kin_mat_list[[chr]],\n#                   addcovar = a_covars)\n# scan_output <- scan1(genoprobs = genoprobs, pheno = expr.mrna[,gene_id], kinship = kin_mat_list, addcovar = a_covars, cores = num_cores)\n# plot_coefCC(x = coef, map = gmap[chr], scan1_output = scan_output, main = gene_id)\n# dev.off()\n# print(\"Done.\")\n# \n# # Diagnostics look good.",
    "created" : 1532289310644.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "63|39|109|0|\n",
    "hash" : "1050867411",
    "id" : "8CE07E56",
    "lastKnownWriteTime" : 1532292631,
    "last_content_update" : 1532292827154,
    "path" : "~/do_heart/scripts/pipeline/qtls/scans/get_qtl_peaks.R",
    "project_path" : "scripts/pipeline/qtls/scans/get_qtl_peaks.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}