{
    "collab_server" : "",
    "contents" : "# Author: Daniel Alfonsetti (daniel.alfonsetti@gmail.com)\n# Date: July 20th, 2018\n# Description: Run pQTLs and eQTLs in parallel on all protein and mRNA expressions and then again considering age and sex as interactive covariates.\n\n# References: \n# http://kbroman.org/qtl2/assets/vignettes/user_guide.html#qtl_analysis_in_diversity_outbred_mice\n# https://smcclatchy.github.io/mapping/13-qtl-in-do/\n\n#######################\n# Reset environment\nrm(list = ls())\n\nlibrary(qtl2)\nlibrary(doParallel)\nlibrary(foreach)\n\n# Using local directories\n# load(\"~/do_heart/data/cleaned_data_with_genoprobs.RData\")\n# output_dir <- \"~/do_heart/results/\"\n# \n# num_cores <- 3\n# num_perms <- 1\n\n\n# Using HPC directories\nload(\"/home/c-alfond/do_heart/data/cleaned_data_with_genoprobs.RData\")\noutput_dir <- \"/fastscratch/c-alfond/do_heart/results/\"\nnum_cores <- 30\nnum_perms <- 10000\n\n# #################### \n# Register parallele back end.\nregisterDoParallel(cores = num_cores)\n\n#########################################################\n# Setup covariate objects\nsex <- as.numeric(annot.sample$Sex) # 1 is female, 2 is male\nnames(sex) <- rownames(annot.sample)\n\nage <- as.numeric(annot.sample$Age)\nnames(age) <- rownames(annot.sample)\n\nnone <- NA\n\n####################\n\n# Run all possible combinations in parallel.\nforeach(expr_type = c(\"mrna\", \"protein\")) %dopar% {\n  foreach(covar = c(\"age\", \"sex\", \"none\")) %dopar% {\n\n      print(paste0(\"Expression type is \", p_expr_type, \" and the interactive covariate is \", p_covar))\n\n      # Extract objects according to the parameters for this job.\n      expr_data <- eval(parse(text = paste0('expr.', p_expr_type))) # Either mrna or protein\n      covar <- eval(parse(text = p_covar)) # Either age, sex, or none. (Determines interactive covariate type)\n\n      #####################\n\n      # Create additive covariates to reduce noise.\n      # Include sex, age, generation, batch, and tag for protein. Include only sex, age, and generation for mrna.\n      if (p_expr_type == 'protein')\n      {\n        a_covars <- cbind(sex, age, as.numeric(annot.sample$Generation), as.numeric(annot.sample$Batch), as.numeric(as.factor(annot.sample$TMT)))\n      } else {\n        a_covars <- cbind(sex, age, as.numeric(annot.sample$Generation))\n      }\n      print(\"Got here 1\")\n\n      # Run scan and corresponding permutation.\n      # Because the data is normalized, we only have to do a permutation testing on one gene per scan type and then apply the threshold to the rest of the genes.\n      if (p_covar == 'none') {\n        print(\"Scanning\")\n        scan_output <- scan1(genoprobs = genoprobs, pheno = expr_data, kinship = kin_mat_list, addcovar = a_covars, cores = num_cores)\n        # print(\"Permuting\")\n        # perms_output <- scan1perm(genoprobs = genoprobs, pheno = expr_data[,1], kinship = kin_mat_list, addcovar = a_covars, cores = num_cores, n_perm = num_perms)\n      }\n      print(\"Got here 2\")\n\n      if (p_covar == 'sex' | p_covar == 'age')\n      {\n        print(\"Scanning\")\n        scan_output <- scan1(genoprobs = genoprobs, pheno = expr_data, kinship = kin_mat_list, addcovar = a_covars, intcovar = covar, cores = num_cores)\n        # print(\"Permuting\")\n        # perms_output <- scan1perm(genoprobs = genoprobs, pheno = expr_data[,1], kinship = kin_mat_list, addcovar = a_covars, intcovar = covar, cores = 5, n_perm = num_perms)\n      }\n\n      print(\"Got here 3\")\n      print(scan_output[,1:2])\n      # Save results of scan and permutation\n      print(\"Saving full scan...\")\n      scan_file_name <- paste0(\"qtlscan_\", p_expr_type, \"_\", p_covar, \"_full.rds\")\n      saveRDS(scan_output, file = paste0(output_dir, scan_file_name))\n      print(\"Saving permutations...\")\n      # perm_file_name <- paste0(\"perms_\", expr_type, \"_\", covar, \"_full.rds\")\n      # saveRDS(perms_output, file = paste0(output_dir, perm_file_name))\n  }\n  # Get effect plots\n}\n\n# Get interaction effects using qtl scans we got from above.\nsetwd(output_dir)\nfiles <- dir(pattern = \"qtlscan\")\nforeach(p_expr_type = c(\"protein\", \"mrna\")) %dopar% {\n\n  expr_files <- files[grepl(p_expr_type, files)]\n  expr_none_file <- expr_files[grepl(\"none\", expr_files)]\n  expr_none <- readRDS(expr_none_file)\n\n  foreach(p_covar = c(\"age\", \"sex\")) %dopar% {\n    expr_p_covar_file <- expr_files[grepl(p_covar, expr_files)]\n    expr_p_covar <- readRDS(expr_p_covar_file)\n    \n    interaction_result <- expr_none - expr_p_covar\n    print(\"Saving interaction scan\")\n    saveRDS(interaction_result, file = paste0(\"qtlscan_\", p_expr_type, \"_\", p_covar, \"_\", \".rds\"))\n  }\n}\n\n",
    "created" : 1532100293343.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3992495764",
    "id" : "AA3B5457",
    "lastKnownWriteTime" : 1532292681,
    "last_content_update" : 1532292681701,
    "path" : "~/do_heart/scripts/pipeline/qtls/scans/qtl.R",
    "project_path" : "scripts/pipeline/qtls/scans/qtl.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}